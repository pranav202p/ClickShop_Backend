package com.trivium.controller;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.trivium.config.JwtService;
import com.trivium.model.Cart;
import com.trivium.model.Order;
import com.trivium.model.Product;
import com.trivium.repository.ProductRepository;
import com.trivium.service.user.UserService;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;



@RestController
@RequestMapping("api/user")
public class UserController {
	
	@Autowired
	UserService userService;
	
	@Autowired
	JwtService jwtService;
	
	@Autowired
	ProductRepository productRepository;
	
	@GetMapping("/getProducts")
    public ResponseEntity<List<Product>> getAllProducts() {
		return ResponseEntity.ok(userService.getAllProducts());
	}
	
	@PostMapping("/addToCart")
	public ResponseEntity<?> addToCart(@RequestBody Map<String, Object> requestBody,
	                                   @RequestHeader("Authorization") String authHeader) {
	    try {
	        String token = authHeader.substring(7);
	        String email = jwtService.extractUsername(token); 

	        String productId = (String) requestBody.get("productId");
	        int quantity = (int) requestBody.get("quantity");

	        
	        Product product = productRepository.findById(productId)
	                .orElseThrow(() -> new RuntimeException("Product not found"));

	        userService.addToCart(email, product, quantity);

	        return ResponseEntity.ok(Collections.singletonMap("message", "Item added to cart"));
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to add to cart: " + e.getMessage());
	    }
	}
	
	   

	@GetMapping("/getCart")
	public ResponseEntity<?> getCart(@RequestHeader("Authorization") String authHeader) {
	    try {
	        String token = authHeader.substring(7); 
	        String email = jwtService.extractUsername(token); 

	        
	        List<Cart> userCart = userService.getCart(email);

	        return ResponseEntity.ok(userCart); 
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to get cart: " + e.getMessage());
	    }
	}
	
	@GetMapping("/getProduct/{id}")
	public ResponseEntity<Product> getProductById(@PathVariable("id") String id) {
	    try {
	        Optional<Product> product = userService.getProductById(id);
	        
	        if (product.isPresent()) {
	            return ResponseEntity.ok(product.get());
	        } else {
	            return ResponseEntity.notFound().build();
	        }

	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	    }
	}
	
	@PutMapping("/update-quantity/{cartId}")
	public ResponseEntity<String> updateCartQuantity(
	        @PathVariable String cartId,
	        @RequestBody Map<String, Integer> body,
	        @RequestHeader("Authorization") String authHeader) {

	    try {
	        String token = authHeader.substring(7); 
	        String email = jwtService.extractUsername(token); 
	        int quantity = body.get("quantity");

	        boolean updated = userService.updateCartQuantity(cartId, quantity, email);

	        if (updated) {
	            return ResponseEntity.ok("Quantity updated successfully.");
	        } else {
	            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Unauthorized access or invalid cart item.");
	        }
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred: " + e.getMessage());
	    }
	}

	 
	 @DeleteMapping("/removefromCart/{cartId}")
	    public ResponseEntity<?> removeFromCart(@PathVariable Long cartId,@RequestHeader("Authorization") String authHeader) {
	        try {
	        	
	        	 String token = authHeader.substring(7); 
	 	        String email = jwtService.extractUsername(token); 

	            userService.removeItemFromCart(cartId,email);
	            return ResponseEntity.ok(Collections.singletonMap("message", "Item removed to cart"));
	        
	        } catch (Exception e) {
	        	return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to add to cart: " + e.getMessage());
	        }
	    }
	
	@PostMapping("/placeOrder")
	public ResponseEntity<?> placeOrder(@RequestBody Map<String, Object> requestBody,
	                                    @RequestHeader("Authorization") String authHeader) {
	    try {
	        String token = authHeader.substring(7);
	        String email = jwtService.extractUsername(token);
             
	        System.out.println("Incoming Order Request: " + requestBody);
	        userService.placeOrder(requestBody, email); 

	        return ResponseEntity.ok(Collections.singletonMap("message", "Order placed successfully"));
	    } catch (Exception e) {
	    	 return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                     .body(Collections.singletonMap("error", "Order placement failed: " + e.getMessage()));
	    }
	}
               
	
     @GetMapping("/getOrders")
     public ResponseEntity<?> getOrders(@RequestHeader("Authorization") String authHeader) {
    	 try {
 	        String token = authHeader.substring(7); 
 	        String email = jwtService.extractUsername(token); 

 	        
 	        List<Order> userOrder = userService.getOrders(email);

 	        return ResponseEntity.ok(userOrder); 
 	    } catch (Exception e) {
 	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to get Orders: " + e.getMessage());
 	    }
     }
     
	}
	


	
	


