package com.trivium.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.RedirectView;

import com.trivium.dto.LoginRequest;
import com.trivium.dto.LoginResponse;
import com.trivium.dto.RegisterRequest;
import com.trivium.model.User;
import com.trivium.service.user.UserService;
import com.trivium.service.user.UserServiceImpl;
import com.trivium.util.JwtUtil;

import jakarta.validation.Valid;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/api/auth")
public class AuthController {
         
	@Autowired
	UserService userservice;
	@Autowired
	private JwtUtil jwtUtil;

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
		System.out.println("Invoked login request ");
	    Optional<User> user = userservice.login(loginRequest.getEmail(), loginRequest.getPassword());
	    if (user.isEmpty()) {
	        return ResponseEntity.status(401).body(Map.of("error", "Invalid credentials"));
	    }
	    System.out.println("IS enabled"+ String.valueOf(user.get().isEnabled()));
	    if (user.isPresent()) {
	        if (!user.get().isEnabled()) {
	           
	            Map<String, Object> response = new HashMap<>();
	            response.put("error", "Account not verified. Please verify your email.");
	            response.put("isVerified", String.valueOf(user.get().isEnabled()));
	            return ResponseEntity.status(403).body(response);
	        }


	        String token = jwtUtil.generateToken(user.get().getEmail(), user.get().getRole());
           
	        Map<String, Object> response = new HashMap<>();
	        response.put("token", token);
	        response.put("role", user.get().getRole());
	        response.put("email", user.get().getEmail());
	        response.put("isVerified", String.valueOf(user.get().isEnabled()));
	        return ResponseEntity.ok(response);
	    } else {
	        return ResponseEntity.status(401).body(Map.of("error", "Invalid credentials"));
	    }
	}
	
	@PostMapping("/register")
	public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest registerRequest, BindingResult bindingResult) {
		
		
	    if (String.valueOf(registerRequest.getPhone()).length() != 10) {
	        bindingResult.rejectValue("phone", "error.phone", "Phone number must be exactly 10 digits");
	    }
	    
	    if (bindingResult.hasErrors()) {
	        Map<String, String> errors = new HashMap<>();
	        for (FieldError error : bindingResult.getFieldErrors()) {
	            errors.put(error.getField(), error.getDefaultMessage());
	        }
	        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
	    }

	    boolean isRegistered = userservice.register(registerRequest);
	   

	    if (!isRegistered) {
	        return new ResponseEntity<>(Map.of("error", "User already exists with this email"), HttpStatus.BAD_REQUEST);
	    }

	    return new ResponseEntity<>(Map.of("message", "User registered successfully. Please verify your email."), HttpStatus.CREATED);
	}

         
	
	  @GetMapping("/verify")
	    public RedirectView verifyEmail(@RequestParam String token, RedirectAttributes redirectAttributes) {
	        boolean isVerified = userservice.verifyToken(token);

	        if (isVerified) {
	            
	            redirectAttributes.addFlashAttribute("message", "Your email has been successfully verified.");
	            return new RedirectView("http://localhost:4200/auth/login");
	        } else {

	        	   redirectAttributes.addFlashAttribute("error", "Invalid or expired verification token.");
	               return new RedirectView("http://localhost:4200/auth/verification-failed");
	        }
	    }
	
	}


		 
	
	

