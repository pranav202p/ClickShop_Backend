package com.trivium.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.trivium.model.Admin;
import com.trivium.model.Order;
import com.trivium.model.Product;
import com.trivium.model.Settings;
import com.trivium.model.User;
import com.trivium.model.Warehouse;
import com.trivium.service.admin.AdminService;

@RestController
@RequestMapping("api/admin")
public class AdminController {
     
	@Autowired
	AdminService adminService;
	
	@GetMapping("/users")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<User>>getAllUSers() {
		 List<User> users = adminService.getAllUsers();
		return ResponseEntity.ok(users);
	}
	
	
	@GetMapping("/orders")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<Order>>getAllOrders() {
		
		return ResponseEntity.ok(adminService.getAllOrders());
	}
	
	@GetMapping("/products")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<Product>> getAllProducts() {
		return ResponseEntity.ok(adminService.getAllProducts());
	}
	
	
	@DeleteMapping("/delete/{id}")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<String> deleteProduct( @PathVariable String id ){

		try {
			adminService.deleteProduct(id);
			return ResponseEntity.ok("Product deleted successfully.");
		} catch (NoSuchElementException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product not found.");
		}
	}
	
	@PostMapping("/addProduct")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Product> addProduct(@RequestBody Product product) {
	    Product saved = adminService.addProduct(product);
	    return ResponseEntity.status(HttpStatus.CREATED).body(saved);
	}

	@PutMapping("/updateProduct/{id}")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<Product> updateProductById(
	        @PathVariable String id,
	        @RequestBody Product updatedProduct) {
	    try {
	        Product updated = adminService.updateProductById(id, updatedProduct);
	        return ResponseEntity.ok(updated);
	    } catch (NoSuchElementException e) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	    }
	}

    
    
    @GetMapping("/getWarehouses")
    @PreAuthorize("hasRole('ADMIN')")
    public List<Warehouse> getAllWarehouses() {
        return adminService.getAllWarehouses();
    }

    @PostMapping("/addWarehouse")
    @PreAuthorize("hasRole('ADMIN')")
    public Warehouse addWarehouse(@RequestBody Warehouse warehouse) {
        return addWarehouse(warehouse);
    }

    @PutMapping("/updateWarehouse/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public Warehouse updateWarehouse(@PathVariable String id, @RequestBody Warehouse warehouse) {
        warehouse.setId(id);
        return adminService.updateWarehouse(warehouse);
    }

    @DeleteMapping("/deleteWarehouse/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public void deleteWarehouse(@PathVariable String id) {
        adminService.deleteWarehouse(id);
    }

    @GetMapping("/getSettings")
    @PreAuthorize("hasRole('SUPERADMIN')")
    public ResponseEntity<?> getAll() {
        try {
            List<Settings> settingsList = adminService.getAllSettings();
            return ResponseEntity.ok(settingsList);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Error fetching settings: " + e.getMessage());
        }
    }
    
    @PutMapping("/saveSettings")
    @PreAuthorize("hasRole('SUPERADMIN')")
    public ResponseEntity<?> create(@RequestBody Settings settings) {
        try {
            Settings createdSettings = adminService.createSettings(settings);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdSettings);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Error creating settings: " + e.getMessage());
        }
    }
    
    
    
    @GetMapping("/getAdmins")
    public ResponseEntity<?> getAllAdmins() {
        try {
            List<Admin> admins = adminService.getAllAdmins();
            return ResponseEntity.ok(admins);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Error fetching admins: " + e.getMessage());
        }
    }

    @PostMapping("/addAdmin")
    public ResponseEntity<?> addAdmin(@RequestBody Admin admin) {
        try {
            Admin createdAdmin = adminService.addAdmin(admin);
            return ResponseEntity.ok(createdAdmin);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error adding admin: " + e.getMessage());
        }
    }

    @PutMapping("/updateAdmin/{id}")
    public ResponseEntity<?> updateAdmin(@PathVariable Long id, @RequestBody Admin admin) {
        try {
            Admin updatedAdmin = adminService.updateAdmin(id, admin);
            return ResponseEntity.ok(updatedAdmin);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error updating admin: " + e.getMessage());
        }
    }

    @DeleteMapping("/deleteAdmin/{id}")
    public ResponseEntity<?> deleteAdmin(@PathVariable Long id) {
        try {
            adminService.deleteAdmin(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error deleting admin: " + e.getMessage());
        }
    }
    
    

}
