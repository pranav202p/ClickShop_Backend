package com.trivium.controller;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.trivium.config.JwtService;
import com.trivium.model.Cart;
import com.trivium.model.Product;
import com.trivium.repository.ProductRepository;
import com.trivium.service.user.UserService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;



@RestController
@RequestMapping("api/user")
public class UserController {
	
	@Autowired
	UserService userService;
	
	@Autowired
	JwtService jwtService;
	
	@Autowired
	ProductRepository productRepository;
	
	@GetMapping("/getProducts")
    public ResponseEntity<List<Product>> getAllProducts() {
		return ResponseEntity.ok(userService.getAllProducts());
	}
	
	@PostMapping("/addToCart")
	public ResponseEntity<?> addToCart(@RequestBody Map<String, Object> requestBody,
	                                   @RequestHeader("Authorization") String authHeader) {
	    try {
	        String token = authHeader.substring(7);
	        String email = jwtService.extractUsername(token); 

	        String productId = (String) requestBody.get("productId");
	        int quantity = (int) requestBody.get("quantity");

	        
	        Product product = productRepository.findById(productId)
	                .orElseThrow(() -> new RuntimeException("Product not found"));

	        userService.addToCart(email, product, quantity);

	        return ResponseEntity.ok(Collections.singletonMap("message", "Item added to cart"));
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to add to cart: " + e.getMessage());
	    }
	}
	
	   

	@GetMapping("getCart")
	public ResponseEntity<?> getCart(@RequestHeader("Authorization") String authHeader) {
		try {
			
			String token = authHeader.substring(7); 
			String email = jwtService.extractUsername(token); 

			// Get cart for the user
			List<Cart> userCart = userService.getCart(email);

			return ResponseEntity.ok(Collections.singletonMap("message", "Item added to cart")); 
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to get cart: " + e.getMessage());
		}
	}

	
	

}
