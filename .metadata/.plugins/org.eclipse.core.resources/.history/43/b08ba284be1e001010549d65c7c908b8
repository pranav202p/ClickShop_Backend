package com.trivium.config;
import com.trivium.model.Admin;
import com.trivium.model.User;
import com.trivium.repository.AdminRepository;
import com.trivium.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.*;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Optional;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AdminRepository adminRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        // Try user repository first
        Optional<User> userOptional = userRepository.findByemail(email);
        if (userOptional.isPresent()) {
            User user = userOptional.get();
            GrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + user.getRole().toUpperCase());

            return new org.springframework.security.core.userdetails.User(
                    user.getEmail(),
                    user.getPassword(),
                    Collections.singletonList(authority)
            );
        }

      
        Optional<Admin> adminOptional = adminRepository.findByemail(email);
        if (adminOptional.isPresent()) {
            Admin admin = adminOptional.get();
            GrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + admin.getRole().toUpperCase());

            return new org.springframework.security.core.userdetails.User(
                    admin.getEmail(),
                    admin.getPassword(),
                    Collections.singletonList(authority)
            );
        }

        throw new UsernameNotFoundException("User not found with email: " + email);
    }
}